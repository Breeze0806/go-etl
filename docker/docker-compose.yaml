version: '3.8'

services:
  postgres_source:
    image: postgres:15
    container_name: postgres_source
    environment:
      POSTGRES_USER: user1
      POSTGRES_PASSWORD: password1
      POSTGRES_DB: db1
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - ${POSTGRES_SOURCE_PATH}:/var/lib/postgresql/data
      - ./postgres/init-src.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c 'max_connections=100' -c 'shared_buffers=256MB' -c 'effective_cache_size=768MB' -c 'work_mem=16MB' -c 'maintenance_work_mem=128MB' -c 'random_page_cost=1.1' -c 'effective_io_concurrency=200' -c 'wal_buffers=16MB' -c 'default_statistics_target=100' -c 'constraint_exclusion=on' -c 'checkpoint_completion_target=0.9' -c 'fsync=on' -c 'synchronous_commit=on' -c 'full_page_writes=on' -c 'wal_level=replica' -c 'max_wal_size=1GB' -c 'min_wal_size=80MB' -c 'log_line_prefix=%m [%p] %q%u@%d ' -c 'log_statement=none' -c 'log_duration=off' -c 'log_lock_waits=on' -c 'log_temp_files=0' -c 'autovacuum=on' -c 'autovacuum_vacuum_scale_factor=0.2' -c 'autovacuum_analyze_scale_factor=0.1'
    restart: unless-stopped
 
  postgres_dest:
    image: postgres:15
    container_name: postgres_dest
    environment:
      POSTGRES_USER: user2
      POSTGRES_PASSWORD: password2
      POSTGRES_DB: db2
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - ${POSTGRES_DEST_PATH}:/var/lib/postgresql/data
      - ./postgres/init-dest.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c 'max_connections=100' -c 'shared_buffers=256MB' -c 'effective_cache_size=768MB' -c 'work_mem=16MB' -c 'maintenance_work_mem=128MB' -c 'random_page_cost=1.1' -c 'effective_io_concurrency=200' -c 'wal_buffers=16MB' -c 'default_statistics_target=100' -c 'constraint_exclusion=on' -c 'checkpoint_completion_target=0.9' -c 'fsync=on' -c 'synchronous_commit=on' -c 'full_page_writes=on' -c 'wal_level=replica' -c 'max_wal_size=1GB' -c 'min_wal_size=80MB' -c 'log_line_prefix=%m [%p] %q%u@%d ' -c 'log_statement=none' -c 'log_duration=off' -c 'log_lock_waits=on' -c 'log_temp_files=0' -c 'autovacuum=on' -c 'autovacuum_vacuum_scale_factor=0.2' -c 'autovacuum_analyze_scale_factor=0.1'
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ${PROMETHEUS_PATH}:/prometheus
    command:
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.min-block-duration=1h'
      - '--storage.tsdb.max-block-duration=1h'
      - '--storage.tsdb.wal-compression'
      - '--storage.tsdb.wal-segment-size=64MB'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_PANELS_DISABLE_SANITIZE_HTML: 'true'
      GF_LOG_MODE: console file
      GF_LOG_LEVEL: warn
    volumes:
      - ${GRAFANA_PATH}:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped

  etl:
    image: breeze0806/go-etl:v0.2.2
    container_name: etl
    ports:
      - "6080:6080"
    volumes:
      - ${ETL_PATH}:/usr/local/go-etl/data
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped
